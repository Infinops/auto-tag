{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Auto Tag (Open Source by Infinops)",
  "Parameters": {
    "LambdaName": {
      "Description": "The name of the Lambda Function.",
      "Type": "String",
      "Default": "InfinopsAutoTag",
      "AllowedValues":[
        "InfinopsAutoTag",
        "InfinopsAutoTagDev"
      ]
    },
    "CodeS3Bucket": {
      "Description": "The name of the code bucket in S3.",
      "Type": "String",
      "Default": "infinops-autotag-releases-ap-northeast-1"
    },
    "CodeS3Path": {
      "Description": "The path of the code zip file in the code bucket in S3.",
      "Type": "String",
      "Default": "autotag-0.1.1.zip"
    },
    "CodeS3PathInitialTagging": {
      "Description": "The path of the initial tagging code zip file in the code bucket in S3.",
      "Type": "String",
      "Default": "autotag-initial-0.1.1.zip"
    },
    "CodeS3PathProjectTagging": {
      "Description": "The path of the project tagging code zip file in the code bucket in S3.",
      "Type": "String",
      "Default": "autotag-project-0.1.1.zip"
    },
    "AutoTagDebugLogging": {
      "Description": "Enable/Disable Debug Logging for the Lambda Function for all processed CloudTrail events.",
      "Type": "String",
      "AllowedValues": [
        "Enabled",
        "Disabled"
      ],
      "Default": "Disabled"
    },
    "AutoTagDebugLoggingOnFailure": {
      "Description": "Enable/Disable Debug Logging when the Lambda Function has a failure.",
      "Type": "String",
      "AllowedValues": [
        "Enabled",
        "Disabled"
      ],
      "Default": "Enabled"
    },
    "AutoTagTagsCreateTime": {
      "Description": "Enable/Disable the \"CreateTime\" tagging for all resources.",
      "Type": "String",
      "AllowedValues": [
        "Enabled",
        "Disabled"
      ],
      "Default": "Enabled"
    },
    "AutoTagTagsInvokedBy": {
      "Description": "Enable/Disable the \"InvokedBy\" tagging for all resources.",
      "Type": "String",
      "AllowedValues": [
        "Enabled",
        "Disabled"
      ],
      "Default": "Enabled"
    },
    "LogRetentionInDays": {
      "Description": "Number of days to retain AutoTag logs.",
      "Type": "Number",
      "Default": 90
    },
    "CustomTags": {
      "Description": "Define custom tags in a JSON document.",
      "Type": "String",
      "Default": ""
    }
  },
  "Resources": {
    "AutoTagLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "CodeS3Bucket"
          },
          "S3Key": {
            "Ref": "CodeS3Path"
          }
        },
        "Description": "Auto Tag (Open Source by Infinops)",
        "FunctionName": {
          "Fn::Sub": "${LambdaName}"
        },
        "Handler": {
          "Fn::Sub": "autotag_event.handler"
        },
        "Role": {
          "Fn::GetAtt": [
            "AutoTagExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs18.x",
        "Timeout": 120,
        "Environment": {
          "Variables": {
            "DEBUG_LOGGING_ON_FAILURE": {
              "Ref": "AutoTagDebugLoggingOnFailure"
            },
            "DEBUG_LOGGING": {
              "Ref": "AutoTagDebugLogging"
            },
            "CREATE_TIME": {
              "Ref": "AutoTagTagsCreateTime"
            },
            "INVOKED_BY": {
              "Ref": "AutoTagTagsInvokedBy"
            },
            "ROLE_NAME": {
              "Ref": "AutoTagMasterRole"
            },
            "CUSTOM_TAGS": {
              "Ref": "CustomTags"
            }
          }
        }
      }
    },
    "AutoTagInititialTaggingLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "CodeS3Bucket"
          },
          "S3Key": {
            "Ref": "CodeS3PathInitialTagging"
          }
        },
        "Description": "Infinops function for initial resource tagging (Open Source by Infinops)",
        "FunctionName": {
          "Fn::Sub": "${LambdaName}InitialTagging"
        },
        "Handler": {
          "Fn::Sub": "index.handler"
        },
        "Role": {
          "Fn::GetAtt": [
            "AutoTagAdditionalExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs20.x",
        "Timeout": 600
      }
    },
    "AutoTagProjectTaggingLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "CodeS3Bucket"
          },
          "S3Key": {
            "Ref": "CodeS3PathProjectTagging"
          }
        },
        "Description": "Infinops function for  resource tagging with project tag based on Name tag(Open Source by Infinops)",
        "FunctionName": {
          "Fn::Sub": "${LambdaName}ProjectTagging"
        },
        "Handler": {
          "Fn::Sub": "index.handler"
        },
        "Role": {
          "Fn::GetAtt": [
            "AutoTagAdditionalExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs20.x",
        "Timeout": 600
      }
    },
    "EventBridgeRuleEveryHour": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "EventBusName": "default",
        "Name": "infinops-cron-hour-rule",
        "ScheduleExpression": "rate(1 hour)",
        "State": "enabled",
        "Targets": {
          "Id":{
            "Fn::Sub": "${LambdaName}ProjectTagging"
          },
          "":{
            "Fn::Sub": "arn:aws:lambda:*:${AWS::AccountId}:function:${LambdaName}ProjectTagging"
          },
          "Input":"Matched event"
        }
      }
    },
    "InfinopsProjectNameTaggingTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": {
          "AttributeName": "project",
          "AttributeType": "S"
        },
        "KeySchema": [{
          "AttributeName": "project",
          "KeyType": "HASH"
        }]
      }
    },
    "AutoTagLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "/aws/lambda/${AutoTagLambdaFunction}"
        },
        "RetentionInDays": {
          "Ref": "LogRetentionInDays"
        }
      }
    },
    "AutoTagLogsMetricFilterMaxMemoryUsed": {
      "Type": "AWS::Logs::MetricFilter",
      "DependsOn": [
        "AutoTagLogGroup"
      ],
      "Properties": {
        "FilterPattern": "[report_name=\"REPORT\", request_id_name=\"RequestId:\", request_id_value, duration_name=\"Duration:\", duration_value, duration_unit=\"ms\", billed_duration_name_1=\"Billed\", bill_duration_name_2=\"Duration:\", billed_duration_value, billed_duration_unit=\"ms\", memory_size_name_1=\"Memory\", memory_size_name_2=\"Size:\", memory_size_value, memory_size_unit=\"MB\", max_memory_used_name_1=\"Max\", max_memory_used_name_2=\"Memory\", max_memory_used_name_3=\"Used:\", max_memory_used_value, max_memory_used_unit=\"MB\"]",
        "LogGroupName": {
          "Fn::Sub": "/aws/lambda/${AutoTagLambdaFunction}"
        },
        "MetricTransformations": [
          {
            "MetricValue": "$max_memory_used_value",
            "MetricNamespace": {
              "Fn::Sub": "PGi/${AutoTagLambdaFunction}"
            },
            "MetricName": {
              "Fn::Sub": "${AutoTagLambdaFunction}-MemoryUsed"
            }
          }
        ]
      }
    },
    "AutoTagExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Sub": "${AWS::StackName}Lambda"
        },
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/infinops/autotag/execution/"
      }
    },

    "AutoTagAdditionalExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Sub": "${AWS::StackName}AdditionalLambda"
        },
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/infinops/autotag-add/execution/"
      }
    },


    "AutoTagExecutionPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": {
          "Fn::Sub": "${AWS::StackName}ExecutionPolicy"
        },
        "Roles": [
          {
            "Ref": "AutoTagExecutionRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "arn:aws:logs:*:*:*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "sts:*"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:iam::*:role/infinops/autotag/master/${AWS::StackName}"
                }
              ]
            }
          ]
        }
      }
    },
    "AutoTagAdditionalExecutionPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": {
          "Fn::Sub": "${AWS::StackName}AdditionalExecutionPolicy"
        },
        "Roles": [
          {
            "Ref": "AutoTagAdditionalExecutionRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement":  [
            {
                "Sid": "ResourceTagging",
                "Effect": "Allow",
                "Action": [
                    "tag:GetResources",
                    "tag:GetTagKeys",
                    "tag:GetTagValues",
                    "tag:GetComplianceSummary",
                    "tag:TagResources",
                    "opsworks:TagResource"
                ],
                "Resource": [
                    "*"
                ]
            },
            {
                "Sid": "GetRegionList",
                "Effect": "Allow",
                "Action": [
                    "ec2:DescribeRegions"
                ],
                "Resource": [
                    "*"
                ]
            },
            {
                "Sid": "Tagging",
                "Effect": "Allow",
                "Action": [
                    "mq:CreateTags",
                    "appstream:TagResource",
                    "cloudwatch:TagResource",
                    "events:TagResource",
                    "logs:TagResource",
                    "s3:PutBucketTagging",
                    "ec2:CreateTags",
                    "dynamodb:TagResource",
                    "elasticmapreduce:AddTags",
                    "rds:AddTagsToResource",
                    "braket:TagResource",
                    "acm:AddTagsToCertificate",
                    "cloud9:TagResource",
                    "cloudformation:TagResource",
                    "cloudformation:DescribeStacks",
                    "cloudtrail:AddTags",
                    "codeartifact:TagResource",
                    "codecommit:TagResource",
                    "codeguru-reviewer:TagResource",
                    "codepipeline:TagResource",
                    "cognito-identity:TagResource",
                    "comprehend:TagResource",
                    "config:TagResource",
                    "dms:AddTagsToResource",
                    "databrew:TagResource",
                    "dataexchange:TagResource",
                    "datapipeline:AddTags",
                    "elasticfilesystem:TagResource",
                    "elasticfilesystem:CreateTags",
                    "eks:TagResource",
                    "emr-containers:TagResource",
                    "elasticache:AddTagsToResource",
                    "elasticbeanstalk:AddTags",
                    "elasticbeanstalk:UpdateTagsForResource",
                    "docdb-elastic:TagResource",
                    "elastic-inference:TagResource",
                    "elasticloadbalancing:AddTags",
                    "es:AddTags",
                    "osis:TagResource",
                    "aoss:TagResource",
                    "fsx:TagResource",
                    "forecast:TagResource",
                    "pipes:TagResource",
                    "frauddetector:TagResource",
                    "glacier:AddTagsToVault",
                    "glue:TagResource",
                    "greengrass:TagResource",
                    "iot:TagResource",
                    "iotanalytics:TagResource",
                    "iotevents:TagResource",
                    "kms:TagResource",
                    "kinesis:AddTagsToStream",
                    "kinesisanalytics:TagResource",
                    "macie2:TagResource",
                    "lambda:TagResource",
                    "organizations:TagResource",
                    "qldb:TagResource",
                    "redshift:CreateTags",
                    "redshift-serverless:TagResource",
                    "robomaker:TagResource",
                    "resource-groups:Tag",
                    "ram:TagResource",
                    "ses:TagResource",
                    "sns:TagResource",
                    "route53resolver:TagResource",
                    "sqs:TagQueue",
                    "sagemaker:AddTags",
                    "secretsmanager:TagResource",
                    "states:TagResource",
                    "storagegateway:AddTagsToResource",
                    "workspaces:CreateTags",
                    "ssm:AddTagsToResource"
                ],
                "Resource": [
                    "*"
                ]
            }
          ]
        }
      }
    },
    "AutoTagDynamoDbProjectList": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": {
          "Fn::Sub": "${AWS::StackName}DynamoDbProjectList"
        },
        "Roles": [
          {
            "Ref": "AutoTagAdditionalExecutionRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement":  [
            {
                "Sid": "DynamoDB",
                "Effect": "Allow",
                "Action": [
                  "dynamodb:BatchGetItem",
                  "dynamodb:GetItem",
                  "dynamodb:Scan"
                ],
                "Resource": [
                  {
                    "Fn::Sub": "arn:aws:dynamodb:*:${AWS::AccountId}:table/InfinopsProjectNameTaggingTable"
                  }
                ]
            }
          ]
        }
      }
    },
    "AutoTagMasterRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Sub": "${AWS::StackName}"
        },
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "AutoTagExecutionRole",
                    "Arn"
                  ]
                }
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/infinops/autotag/master/"
      }
    },
    "AutoTagMasterPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": {
          "Fn::Sub": "${AWS::StackName}MasterPolicy"
        },
        "Roles": [
          {
            "Ref": "AutoTagMasterRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "autoscaling:CreateOrUpdateTags",
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:DescribeTags",
                "cloudwatch:TagResource",
                "datapipeline:AddTags",
                "dynamodb:ListTagsOfResource",
                "dynamodb:TagResource",
                "ec2:CreateTags",
                "ec2:DescribeInstances",
                "ec2:DescribeSnapshots",
                "events:TagResource",
                "elasticloadbalancing:AddTags",
                "elasticmapreduce:AddTags",
                "iam:TagRole",
                "iam:TagUser",
                "lambda:TagResource",
                "logs:TagLogGroup",
                "opsworks:DescribeInstances",
                "opsworks:DescribeStacks",
                "opsworks:ListTags",
                "opsworks:TagResource",
                "rds:AddTagsToResource",
                "s3:GetBucketTagging",
                "s3:PutBucketTagging"
              ],
              "Resource": [
                "*"
              ]
            }
          ]
        }
      }
    },
    "TriggerLambdaPermRegionHongKong": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "AutoTagLambdaFunction",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AutoTagLambdaFunction",
            "Arn"
          ]
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:sns:ap-east-1:${AWS::AccountId}:AutoTag"
        }
      }
    },
    "TriggerLambdaPermRegionTokyo": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "AutoTagLambdaFunction",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AutoTagLambdaFunction",
            "Arn"
          ]
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:sns:ap-northeast-1:${AWS::AccountId}:AutoTag"
        }
      }
    },
    "TriggerLambdaPermRegionSeoul": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "AutoTagLambdaFunction",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AutoTagLambdaFunction",
            "Arn"
          ]
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:sns:ap-northeast-2:${AWS::AccountId}:AutoTag"
        }
      }
    },
    "TriggerLambdaPermRegionMumbai": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "AutoTagLambdaFunction",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AutoTagLambdaFunction",
            "Arn"
          ]
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:sns:ap-south-1:${AWS::AccountId}:AutoTag"
        }
      }
    },
    "TriggerLambdaPermRegionSingapore": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "AutoTagLambdaFunction",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AutoTagLambdaFunction",
            "Arn"
          ]
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:sns:ap-southeast-1:${AWS::AccountId}:AutoTag"
        }
      }
    },
    "TriggerLambdaPermRegionSydney": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "AutoTagLambdaFunction",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AutoTagLambdaFunction",
            "Arn"
          ]
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:sns:ap-southeast-2:${AWS::AccountId}:AutoTag"
        }
      }
    },
    "TriggerLambdaPermRegionCentral": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "AutoTagLambdaFunction",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AutoTagLambdaFunction",
            "Arn"
          ]
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:sns:ca-central-1:${AWS::AccountId}:AutoTag"
        }
      }
    },
    "TriggerLambdaPermRegionFrankfurt": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "AutoTagLambdaFunction",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AutoTagLambdaFunction",
            "Arn"
          ]
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:sns:eu-central-1:${AWS::AccountId}:AutoTag"
        }
      }
    },
    "TriggerLambdaPermRegionStockholm": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "AutoTagLambdaFunction",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AutoTagLambdaFunction",
            "Arn"
          ]
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:sns:eu-north-1:${AWS::AccountId}:AutoTag"
        }
      }
    },
    "TriggerLambdaPermRegionIreland": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "AutoTagLambdaFunction",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AutoTagLambdaFunction",
            "Arn"
          ]
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:sns:eu-west-1:${AWS::AccountId}:AutoTag"
        }
      }
    },
    "TriggerLambdaPermRegionLondon": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "AutoTagLambdaFunction",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AutoTagLambdaFunction",
            "Arn"
          ]
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:sns:eu-west-2:${AWS::AccountId}:AutoTag"
        }
      }
    },
    "TriggerLambdaPermRegionParis": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "AutoTagLambdaFunction",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AutoTagLambdaFunction",
            "Arn"
          ]
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:sns:eu-west-3:${AWS::AccountId}:AutoTag"
        }
      }
    },
    "TriggerLambdaPermRegionBahrain": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "AutoTagLambdaFunction",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AutoTagLambdaFunction",
            "Arn"
          ]
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:sns:me-south-1:${AWS::AccountId}:AutoTag"
        }
      }
    },
    "TriggerLambdaPermRegionSaoPaulo": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "AutoTagLambdaFunction",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AutoTagLambdaFunction",
            "Arn"
          ]
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:sns:sa-east-1:${AWS::AccountId}:AutoTag"
        }
      }
    },
    "TriggerLambdaPermRegionNVirginia": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "AutoTagLambdaFunction",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AutoTagLambdaFunction",
            "Arn"
          ]
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:sns:us-east-1:${AWS::AccountId}:AutoTag"
        }
      }
    },
    "TriggerLambdaPermRegionOhio": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "AutoTagLambdaFunction",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AutoTagLambdaFunction",
            "Arn"
          ]
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:sns:us-east-2:${AWS::AccountId}:AutoTag"
        }
      }
    },
    "TriggerLambdaPermRegionNCalifornia": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "AutoTagLambdaFunction",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AutoTagLambdaFunction",
            "Arn"
          ]
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:sns:us-west-1:${AWS::AccountId}:AutoTag"
        }
      }
    },
    "TriggerLambdaPermRegionOregon": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "AutoTagLambdaFunction",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AutoTagLambdaFunction",
            "Arn"
          ]
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:sns:us-west-2:${AWS::AccountId}:AutoTag"
        }
      }
    }
  }
}
